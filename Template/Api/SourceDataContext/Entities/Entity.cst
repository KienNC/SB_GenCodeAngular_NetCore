<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="true" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>
<%@ Assembly Name="Newtonsoft.Json" Path="..\..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>

<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%@ Property Name="UsingOldTemplate" Type="System.Boolean" Default="false" %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>
<%@ Property Name="MappingFieldAndTableFK" Optional="True" Type="System.String"%>

<%=CommonService.GenerateAuthor(CoreVersion, Author)%>

using SB.Core;
using System;
using System.Collections.Generic;


namespace <%=ScopeService %>.DataContext.Entity
{
    
    public partial class <%=SourceTable.Name %> : BaseEntity
	{
    <% var keyIndex = -1;
    for (int i = 0; i < SourceTable.Columns.Count; i++) {
        if(!CommonService.IsColumnCore(SourceTable.Columns[i].Name)){
    %>
        
        /// <summary>
        /// </summary>
        public <%=GetCShapType(SourceTable.Columns[i].SystemType.ToString(), SourceTable.Columns[i].AllowDBNull) %> <%=SourceTable.Columns[i].Name %> { get; set; }
    <%} 
    } %>
    <%  int colIndex = 0;
    if (UsingOldTemplate) { 
        foreach(var column in SourceTable.ForeignKeys) {
    %>
        //[Key(<%=++keyIndex%>)]
        public virtual <%= column.PrimaryKeyTable.Name %> <%= column.ForeignKeyMemberColumns.First().Name %>Navigation { get; set; }
    <%
    colIndex++;} 
    %>
    <%}else { 
        foreach(ColumnSchema column in SourceTable.ForeignKeyColumns) {
        TableSchema tablePrimary = CommonService.GetTablePrimary(SourceTable.ForeignKeys[colIndex].Name, SourceDatabase.Tables);
    %>
        //[Key(<%=++keyIndex%>)]
        public virtual <%=CommonService.GenPTableName2(SourceDatabase.Tables, SourceTable.ForeignKeys[colIndex].Name, UsingOldTemplate, SourceTable.ForeignKeys, SourceTable.ForeignKeyColumns, column, MappingFieldAndTableFK)%> <%=!UsingOldTemplate ? CommonService.GenPTableName2(SourceDatabase.Tables, SourceTable.ForeignKeys[colIndex].Name, UsingOldTemplate, SourceTable.ForeignKeys, SourceTable.ForeignKeyColumns, column, MappingFieldAndTableFK) : ""%> { get; set; }		
    <%
    colIndex++;} 
    %>
    <%} %>

    <% colIndex = 0;
    foreach(var primaryKey in SourceTable.PrimaryKeys) {
        TableSchema tableForegin = CommonService.GetTableForeign(primaryKey.Name, SourceDatabase.Tables);
    %>
        //[Key(<%=++keyIndex%>)]
        public virtual ICollection<<%=CommonService.GenerateNameTable(tableForegin.Name)%>> <%=CommonService.GenCTableName(SourceDatabase.Tables, primaryKey.Name, UsingOldTemplate)%> { get; set; } = new HashSet<<%=CommonService.GenerateNameTable(tableForegin.Name)%>>();
    <%
    colIndex++;} 
    %>
	}
    public static class <%=CommonService.GenerateNameTable(SourceTable.Name) %>Extension {
        public static <%=CommonService.GenerateNameTable(SourceTable.Name) %> Clone(this <%=CommonService.GenerateNameTable(SourceTable.Name) %> item)
        {
            return new <%=CommonService.GenerateNameTable(SourceTable.Name) %>
            {
                <% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
                  if(!CommonService.IsColumnCore(SourceTable.Columns[i].Name)){
                %>
                <%=SourceTable.Columns[i].Name %> = item.<%=SourceTable.Columns[i].Name %>,
                <%} }%>
            };
        }
    }
}
<script runat="template">
    private string GetCShapType(string dataType, bool isNull) {
        dataType=dataType.ToLower();
        string result="string";
        switch (dataType)
          {
              case "system.int32":
                  result = "int";
                  break;
              case "system.timespan":
                  result = "TimeSpan";
                  break;  
              case "system.int64":
                  result = "long";
                  break;
              case "system.int16":
                  result = "short";
                  break;   
              case "system.datetime":
                result = "DateTime";
                break;     
                    
              case "system.boolean":
                  result = "bool";
                  break;   
                    
              case "system.guid":
                  result = "Guid";
                  break;
              case "system.byte":
                  result = "Byte";
                  break;
            
                
              case "system.string":
                  result = "string";
                  break;  
                
              case "system.double":
                  result = "double";
                  break;
                
             case "system.decimal":
              result = "decimal";
              break;
                
              default:
                  result = dataType;
                  break;   
          }
          
          if (isNull==true) {
               result += "?";
              //if (result!="string") {
              //  result += "?";
              //}
          }
          
      return result;
    }
</script>
    