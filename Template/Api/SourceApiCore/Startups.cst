<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>

using <%=ScopeService %>.Service.Configs;
using AutoMapper;
using EventBus.Lib.Abstractions;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using Microsoft.Extensions.Hosting;
using <%=ScopeService %>.API.IntegrationEvents.EventHandling;
using <%=ScopeService %>.DataContext;
using Startup.Lib;

namespace <%=ScopeService %>.API.Startups
{
    public static class StartupExtensions
    {
        /// <summary>
        ///     Đăng ký các dịch vụ sẽ dùng trong project
        /// </summary>
        /// <param name="services"></param>
        /// <param name="configuration"></param>
        public static void AddCustomService(this IServiceCollection services, IConfiguration configuration)
        {
            services.DependencyInjectionServices(configuration);
            services.AddAutoMapper(typeof(Startup));
            services.AddTransient<TaskProcessBulkHandler>();
            services.AddSaveChangeServiceProvider<<%= ScopeService + "DataContext"%>>();
        }

        /// <summary>
        ///     Gọi hàm này khi đang ở chế độ debug (để inject thêm một số thành phần hỗ trợ đặc biệt cho môi trường dev
        /// </summary>
        /// <param name="services"></param>
        /// <param name="configuration"></param>
        public static void AddDebugCustomService(this IServiceCollection services, IConfiguration configuration)
        {
            
        }

        /// <summary>
        ///     Khai báo / config các pipeline / middleware trong project
        /// </summary>
        /// <param name="app"></param>
        public static void UseCustomService(this IApplicationBuilder app, IConfiguration configuration)
        {
            var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
            //eventBus.SubscribeDynamic<TaskProcessBulkHandler>("{SERVICE_NAME}_{ENTITY_NAME}_PROCESS_BULK");

        }

        public static void UnSubscribeEventBus(this IHostApplicationLifetime applicationLifetime, IApplicationBuilder app, 
            IConfiguration configuration)
        {
            applicationLifetime.ApplicationStopping.Register(() =>
            {
                try
                {
                    var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
                    eventBus.UnsubscribeDynamic<TaskProcessBulkHandler>("{SERVICE_NAME}_{ENTITY_NAME}_PROCESS_BULK");

                }
                catch (Exception e)
                {

                }
            });
        }
    }
}


