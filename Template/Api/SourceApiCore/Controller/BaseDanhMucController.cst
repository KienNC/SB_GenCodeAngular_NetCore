<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>

<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>

<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>

using SB.Core;
using SB.Core.Mapper;
using <%=ScopeService %>.Service.Generated;
using Microsoft.AspNetCore.Mvc;



namespace <%=ScopeService %>.API.Controllers
{
     [Route("api/[controller]")]
    [ApiController]
    public class BaseDanhMucController<TEntity, TEntityDto> : BaseController where TEntity : BaseEntity
    {
        protected readonly IServiceProvider _serviceProvider;
        private readonly IBaseService<TEntity> _service;

        public BaseDanhMucController(IServiceProvider serviceProvider, IBaseService<TEntity> service)
        {
            _serviceProvider = serviceProvider;
            _service = service;
        }

        /// <summary>
        /// Tìm theo Id 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("TimTheoId/{id:Guid}")]
        public virtual async Task<IActionResult> TimTheoId(Guid id)
        {
            var item = await _service.GetByIdAsync(id);

            if (item.Data != null)
            {
                return ResponseResult(MethodResult<object>.ResultWithData(AutoMapperConfiguration.Mapper.Map<TEntity, TEntityDto>(item.Data)));
            }
            return ResponseResult(MethodResult<object>.ResultWithData(item));
        }

        /// <summary>
        /// Lấy tất cả
        /// </summary>
        /// <returns></returns>
        [HttpGet("LayTatCa")]
        public virtual async Task<IActionResult> LayTatCaAsync()
        {
            var rs = await _service.GetAllAsync();
            return ResponseResult(rs);
        }

        /// <summary>
        /// Thêm mới
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost("ThemMoi")]
        public virtual async Task<IActionResult> ThemMoi(TEntityDto model)
        {
            if (!ModelState.IsValid)
            {
                return ResponseResult(MethodResult<object>.ResultWithError(Contants.MESS_Model_UnValidate,Contants.CODE_Model_UnValidate));
            }
            var newModel = AutoMapperConfiguration.Mapper.Map<TEntityDto, TEntity>(model);
            var rs = await _service.InsertAsync(newModel);

            return ResponseResult(rs);

        }

        /// <summary>
        /// Cập nhật thông tin
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost("CapNhatThongTin")]
        public virtual async Task<IActionResult> CapNhatThongTin(TEntityDto model)
        {
            if (!ModelState.IsValid)
            {
                return ResponseResult(MethodResult<object>.ResultWithError(Contants.MESS_Model_UnValidate, Contants.CODE_Model_UnValidate));
            }
            var saveModel = AutoMapperConfiguration.Mapper.Map<TEntityDto, TEntity>(model);

            var data = await _service.GetByIdAsync((saveModel).Id);
            if (data.Data == null)
            {
                return ResponseResult(MethodResult<bool>.ResultWithError(Contants.MESS_NotFound, Contants.CODE_NotFound));
            }

            var rs = await _service.UpdateAsync(saveModel);


            return ResponseResult(rs);

        }

    }
}

