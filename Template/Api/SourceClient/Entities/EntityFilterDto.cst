<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="true" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>
<%@ Assembly Name="Newtonsoft.Json" Path="..\..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>

<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%@ Property Name="UsingOldTemplate" Type="System.Boolean" Default="false" %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>
<%=CommonService.GenerateAuthor(CoreVersion, Author)%>

using SB.Core;
using System;
using System.Collections.Generic;

namespace <%=ScopeService %>.Client.Dto
{
    public partial class <%=CommonService.GenerateNameTable(SourceTable.Name) %>FilterDto : GridInfo
	{
        public string KeyWord { get; set; }
	}
}

<script runat="template">
    private string GetCShapType(string dataType, bool isNull) {
        dataType=dataType.ToLower();
        string result="string";
        switch (dataType)
          {
              case "system.int32":
                  result = "int";
                  break;
              case "system.timespan":
                  result = "TimeSpan";
                  break;  
              case "system.int64":
                  result = "long";
                  break;
              case "system.int16":
                  result = "short";
                  break;   
              case "system.datetime":
                result = "DateTime";
                break;     
                    
              case "system.boolean":
                  result = "bool";
                  break;   
                    
              case "system.guid":
                  result = "Guid";
                  break;
              case "system.byte":
                  result = "Byte";
                  break;
            
                
              case "system.string":
                  result = "string";
                  break;  
                
              case "system.double":
                  result = "double";
                  break;
                
             case "system.decimal":
              result = "decimal";
              break;
                
              default:
                  result = dataType;
                  break;   
          }
          
          if (isNull==true) {
              if (result!="string") {
                result += "?";
              }
          }
          
      return result;
    }
</script>
    