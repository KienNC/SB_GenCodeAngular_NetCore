<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>

<%@ Property Category="Table" Name="SourceDatabase" Type="DatabaseSchema" Description="Đường dẫn connection string" %>
<%@ Property Category="Table" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>

<%@ Property Category="Config" Name="Config" Type="ConfigGenerate" Description="Cấu hình chung của genecode" %>

<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="Endpoint" Type="System.String" %>
<%@ Property Name="IsVietNameseTableSetting"  Type="System.Boolean" Default="false" Description="Sử dụng tên bảng kiểu VietNam (Ngăn cách nhau bởi dấu _ ) "%>
<%@ Register Name="CommonService" Template="..\CommonService.cst" %>

<%@ Register Name="ComponentHtml" Template="list.component.html.cst" %>
<%@ Register Name="ComponentTs" Template="list.component.ts.cst" %>
<%@ Register Name="Module" Template="module.cst" %>
<%@ Register Name="Routing" Template="routing.cst" %>
<%@ Register Name="Service" Template="Services\Service.cst" %>

<% CreateFolderList();%>

<script runat="template">
    public void CreateFolderList() {
        for(int i = 0; i < SourceTables.Count; i++) {
            var tableSchema = SourceTables[i];
            var outPut = Location + "\\" + CommonService.GetNameFile(tableSchema.Name, IsVietNameseTableSetting);
            if (!Directory.Exists(Location))
                Directory.CreateDirectory(Location);
             
            var entityTs = this.Create<ComponentTs>();
            var entity = tableSchema;
            var fileName = String.Format("{0}\\{1}-list.component.ts", outPut, CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTs);
                entityTs.EntityNamespace = "";
                entityTs.SourceTable = entity;
                Response.WriteLine(fileName);
                entityTs.RenderToFile(fileName, true);
    		}
        
            var entityHtml = this.Create<ComponentHtml>();
            var fileHtml = String.Format("{0}\\{1}-list.component.html", outPut, CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
            if (!File.Exists(fileHtml))
    		{
                this.CopyPropertiesTo(entityHtml);
                entityHtml.EntityNamespace = "";
                entityHtml.SourceTable = entity;
                Response.WriteLine(fileHtml);
                entityHtml.RenderToFile(fileHtml, true);
    		}
               var fileScss = String.Format("{0}\\{1}-list.component.scss", outPut, CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
            if (!File.Exists(fileScss))
    		{
                File.Create(fileScss);
    		}
//            var module = this.Create<Module>();
//            var fileModule = String.Format("{0}\\{1}.module.ts", outPut, CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
//            if (!File.Exists(fileModule))
//    		{
//                this.CopyPropertiesTo(module);
//                module.EntityNamespace = "";
//                module.SourceTable = entity;
//                Response.WriteLine(fileModule);
//                module.RenderToFile(fileModule, true);
//    		}
//            
//            var routing = this.Create<Routing>();
//            var fileRouting = String.Format("{0}\\{1}.routing.ts", outPut, CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
//            if (!File.Exists(fileRouting))
//    		{
//                this.CopyPropertiesTo(routing);
//                routing.EntityNamespace = "";
//                routing.SourceTable = entity;
//                Response.WriteLine(fileRouting);
//                routing.RenderToFile(fileRouting, true);
//    		}
//   
//         
//            var fileService = String.Format("{0}\\{1}\\{2}.service.ts", outPut, "services", CommonService.GetNameFile(entity.Name, IsVietNameseTableSetting));
//            if (!File.Exists(fileService)) {
//                var service = this.Create<Service>();
//                service.EntityNamespace = "";
//                service.SourceTable = entity;
//                service.Endpoint = Endpoint;
//                service.RenderToFile(fileService, true);
//           }
        }
    }
</script>