<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Newtonsoft.Json.dll" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Category="Config" Name="Config" Type="ConfigGenerate" Description="Cấu hình chung của genecode" %>


<%@ Property Name="IsVietNameseTableSetting" Type="System.Boolean" Default="false" Description="Sử dụng tên bảng kiểu VietNam (Ngăn cách nhau bởi dấu _ ) "%>
<%@ Register Name="CommonService" Template="..\CommonService.cst" %>

import { Component, OnInit } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { NzModalRef } from 'ng-zorro-antd/modal';
import { NzNotificationService } from 'ng-zorro-antd/notification';
import { BaseEditComponent } from 'src/app/constants/base-edit.component';
import { MESSAGE } from 'src/app/constants/message';
import { ResponseData } from 'src/app/models/response';

@Component({
  selector: 'app-<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-edit',
  templateUrl: './<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-edit.component.html',
  styleUrls: ['./<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-edit.component.scss']
})
export class <%=SourceTable.Name%>EditComponent extends BaseEditComponent implements OnInit {
  constructor(
    public modal: NzModalRef,
    private fb: FormBuilder,
    private roleService: RoleService,
    private notification: NzNotificationService,
    private _<%=LowerFirstChar(SourceTable.Name)%>Service: <%=SourceTable.Name%>Service
  ) {
    super(modal)
  }
  ngOnInit() {
    this.initForm();
  }

  initForm() {
    this.formInput = this.fb.group({
    <%=renderControl()%>
    });

    if (this.id) {
      //edit
      this._<%=LowerFirstChar(SourceTable.Name)%>Service.get(this.id).subscribe((res: ResponseData) => {
        if (res.isSuccess) {
          this.formInput.patchValue({
           <%=patchValueForm()%>
          });
        }
      });
    }
  }

  addOrEdit() {
    this.markFormGroupTouched(this.formInput);
    if (this.formInput.invalid) {
      return;
    }

    let body: any = this.formInput.value;
    if (this.id) {
      body.id = this.id;
    }

    if (!this.id) {
      this._<%=LowerFirstChar(SourceTable.Name)%>Service.create(body).subscribe((res: ResponseData) => {
        if (res.isSuccess) {
          this.notification.success(MESSAGE.SUCCESS, MESSAGE.ADD_SUCCESS);
          this.modal.close(true);
        } else {
          this.notification.error(res.errorCode, res.message);
        }
      });
    } else {
      this._<%=LowerFirstChar(SourceTable.Name)%>Service.update(body).subscribe((res: ResponseData) => {
        if (res.isSuccess) {
          this.notification.success(MESSAGE.SUCCESS, MESSAGE.UPDATE_SUCCESS);
          this.modal.close(true);
        } else {
          this.notification.error(res.errorCode, res.message);
        }
      });
    }
  }
}

<script runat="template">
    private string GetCShapType(string dataType) {
        dataType = dataType.ToLower();
        string result = "TextControlSchema";
        switch (dataType)
        {
            case "system.int32":
                result = "TextControlSchema";
                break;
            case "system.int64":
                result = "TextControlSchema";
                break;
            case "system.datetime":
                result = "DateTimeControlSchema";
                break;  
            case "system.string":
                result = "TextControlSchema";
                break;
            case "system.boolean":
                result = "SwitchControlSchema";
                break;
            case "system.timespan":
                result = "DateTimeControlSchema";
                break;
            break; 
        }
        return result;
    }
    
    private class DropDownItem
    {
        public bool isCommonMasterData { get; set; }
        public string MasterDataCode { get; set; }     
    }
    
    private string LowerFirstChar(string Value) {
        return Char.ToLowerInvariant(Value[0]) + Value.Substring(1);
    }
    private string Tab(int tab, bool haveNewRow = true) {
        string result = "";
        if (haveNewRow)
            result = "\n";
        for(int i = 0; i < tab; i++)
            result += "\t";
        return result;
    }
    
    private string renderControl(){
         string fields = "\t";
        string lastString = ",\n\t\t\t";
          var columnIgnores = Config.FieldFormIgnores.ToList();    
         
        for (int i = 0; i < SourceTable.Columns.Count; i++)
        {
            string field = SourceTable.Columns[i].Name;
            
            string fieldLower = field.ToLower();
            if (columnIgnores.Any(q => q.ToLower() == fieldLower))
                continue;
            string name = LowerFirstChar(field);
           // string dataFormat = GetDataFormat(SourceTable.Columns[i].SystemType.ToString());
            if(SourceTable.Columns[i].AllowDBNull){
                fields += name +": [null]" + lastString;
            } else {
                fields += name +": [null,[Validators.required]]" + lastString;
            }
            
        };
        //xóa ký tự cuối
        if (fields.Length > 1)
        {
            return fields.Substring(0, fields.Length - lastString.Length);
        }
        return fields;
    }
    
    private string patchValueForm(){
         string fields = "\t";
        string lastString = ",\n\t\t\t";
          var columnIgnores = Config.FieldFormIgnores.ToList();    
        for (int i = 0; i < SourceTable.Columns.Count; i++)
        {
            string field = SourceTable.Columns[i].Name;
            string fieldLower = field.ToLower();
            if (columnIgnores.Any(q => q.ToLower() == fieldLower))
                continue;
            string name = LowerFirstChar(field);
          //  string dataFormat = GetDataFormat(SourceTable.Columns[i].SystemType.ToString());
            fields += name +": res.data." + name + lastString;
        }
        //xóa ký tự cuối
        if (fields.Length > 1)
        {
            return fields.Substring(0, fields.Length - lastString.Length);
        }
        return fields;
    }
    #region  test
    //    private string renderFieldInform()
//    {
//        string fields = "";
//        string lastString = ",\n";
//        var columnIgnores = Config.FieldIgnores.ToList();
////        if (Config.Configs.ContainsKey(SourceTable.Name)) {
////            columnIgnores.AddRange(Config.Configs[SourceTable.Name].FieldIgnores.ToList());
////        }
//        for (int i = 0; i < SourceTable.Columns.Count; i++)
//        {
//            string field = SourceTable.Columns[i].Name;
//            string fieldLower = field.ToLower();
//            if (columnIgnores.Any(q => q.ToLower() == fieldLower))
//                continue;
//            string name = LowerFirstChar(field);
//            string validators = SourceTable.Columns[i].AllowDBNull == true ? "" : "," + Tab(5) + "validators: { required: true }";
//            string typeControll = GetCShapType(SourceTable.Columns[i].SystemType.ToString());
//            fields += Tab(3, false) + "new LabelSchema({" + Tab(4) + "field: '" + name + "Label'," + Tab(4) + "for: '" + name + "'," + Tab(4) + "text: this._translateService.instant('" + CommonService.GetDescription(SourceTable.Columns[i].Description) + "')" + Tab(3) + "})," 
//                    + Tab(3) + "new " + typeControll + "({" + Tab(4) + "field: '" + name + "'" + validators + "" + Tab(3) + "})" + lastString; 
//        }
//        if (fields.Length > 1 )
//        {
//            return fields.Substring(0, fields.Length - lastString.Length).Substring(Tab(3, false).Length);
//        }
//        return fields;
//    }
    #endregion

</script>