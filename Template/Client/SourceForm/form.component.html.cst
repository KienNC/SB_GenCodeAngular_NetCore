<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Category="Config" Name="Config" Type="ConfigGenerate" Description="Cấu hình chung của genecode" %>
<form nz-form [formGroup]="formInput" >
<%=renderControl()%>
  <nz-form-item nz-row class="register-area">
    <nz-form-control [nzSpan]="14" [nzOffset]="6">
      <button nz-button nzType="primary" class="m-r-5" (click)="addOrEdit()">Lưu</button>
      <button nz-button (click)="onExit()" >Thoát</button>
    </nz-form-control> 
  </nz-form-item>
</form>

<script runat="template">
    private string GetCShapType(string dataType) {
        dataType = dataType.ToLower();
        string result = "text";
        switch (dataType)
        {
            case "system.int32":
                result = "number";
                break;
            case "system.int64":
                result = "number";
                break;
            case "system.datetime":
                result = "DateTimeControlSchema";
                break;  
            case "system.string":
                result = "TextControlSchema";
                break;
            case "system.boolean":
                result = "SwitchControlSchema";
                break;
            case "system.timespan":
                result = "DateTimeControlSchema";
                break;
            break; 
        }
        return result;
    }
    
     private string GetControl(string name, string dataType,bool required) {
        dataType = dataType.ToLower();
        string result = dataType;
        switch (dataType)
        {
            case "int32":
                if(required){
                    result = "<nz-form-item> \n\t\t <nz-form-label nzRequired  [nzSm]='6' [nzXs]='24' nzFor='"+name+"'>"+name+"</nz-form-label>\n\t\t\t<nz-form-control [nzSm]='14' [nzXs]='24' nzErrorTip='"+name+" không được bỏ trống!'>\n\t\t\t\t<input nz-input  formControlName='"+ name +"' type='number'>\n\t\t\t</nz-form-control>\n\t</nz-form-item>";
                } else  {
                    result = "<nz-form-item>\n\t\t<nz-form-label  [nzSm]='6' [nzXs]='24' nzFor='"+name+"'>"+name+"</nz-form-label>\n\t\t\t<nz-form-control [nzSm]='14' [nzXs]='24'>\n\t\t\t\t<input nz-input formControlName='"+ name +"' type='number'>\n\t\t\t</nz-form-control>\n\t\t</nz-form-item>";
                }
                break;
            case "int64":
                if(required){
                    result = "<nz-form-item> \n\t <nz-form-label nzRequired  [nzSm]='6' [nzXs]='24' nzFor='"+name+"'>"+name+"</nz-form-label>\n\t\t<nz-form-control [nzSm]='14' [nzXs]='24' nzErrorTip='"+name+" không được bỏ trống!'>\n\t\t\t<input nz-input  formControlName='"+ name +"' type='number'>\n\t</nz-form-control>\n\t </nz-form-item>";
                } else  {
                    result = "<nz-form-item> \n\t <nz-form-label  [nzSm]='6' [nzXs]='24' nzFor='name'>"+name+"</nz-form-label>\n\t\t<nz-form-control [nzSm]='14' [nzXs]='24'>\n\t\t\t<input nz-input formControlName='"+ name +"' type='number'>\n\t</nz-form-control>\n\t </nz-form-item>";
                }
                break;
            case "datetime":
                result = "DateTimeControlSchema";
                break;  
            case "string":
                if(required){
                    result = "<nz-form-item> \n\t <nz-form-label nzRequired  [nzSm]='6' [nzXs]='24' nzFor='"+name+"'>"+name+"</nz-form-label>\n\t\t<nz-form-control [nzSm]='14' [nzXs]='24' nzErrorTip='"+name+" không được bỏ trống!'>\n\t\t\t<input nz-input placeholder='không nhập ký tự đặc biệt !@#$%...' formControlName='"+ name +"' type='text'>\n\t</nz-form-control>\n\t </nz-form-item>";
                } else  {
                    result = "<nz-form-item> \n\t <nz-form-label  [nzSm]='6' [nzXs]='24' nzFor='"+name+"'>"+name+"</nz-form-label>\n\t\t<nz-form-control [nzSm]='14' [nzXs]='24'>\n\t\t\t<input nz-input formControlName='"+ name +"' type='text' placeholder='không nhập ký tự đặc biệt !@#$%...'>\n\t\t</nz-form-control>\n\t </nz-form-item>";
                }
                break;
            case "boolean":
                result = "SwitchControlSchema";
                break;
            case ".timespan":
                 result = "<nz-form-item> \n\t <nz-form-label nzRequired  [nzSm]='6' [nzXs]='24' nzFor='name'>Tên khóa học</nz-form-label>\n\t\t<nz-form-control [nzSm]='14' [nzXs]='24' nzErrorTip='Tên không được bỏ trống!'>\n\t\t\t<input nz-input placeholder='Tối đa 200 ký tự, không nhập ký tự đặc biệt !@#$%...' formControlName='name' type='text'>\n\t</nz-form-control>\n\t </nz-form-item>";
                break;
            break; 
        }
        return result;
    }
     
    private class DropDownItem
    {
        public bool isCommonMasterData { get; set; }
        public string MasterDataCode { get; set; }     
    }
    
    private string LowerFirstChar(string Value) {
        return Char.ToLowerInvariant(Value[0]) + Value.Substring(1);
    }
    
    private string renderControl(){
         string fields = "\t";
        string lastString = "\n\t";
          var columnIgnores = Config.FieldIgnores.ToList();    
         
        for (int i = 0; i < SourceTable.Columns.Count; i++)
        {
            string field = SourceTable.Columns[i].Name;
            
            string fieldLower = field.ToLower();
            if (columnIgnores.Any(q => q.ToLower() == fieldLower))
                continue;
            string name = LowerFirstChar(field);         
            fields +=GetControl(name,SourceTable.Columns[i].DataType.ToString(),!SourceTable.Columns[i].AllowDBNull)+lastString;
            
        };
        return fields;
    }
    
</script>