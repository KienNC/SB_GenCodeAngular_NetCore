<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>

<%@ Import Namespace="System.Data.Entity.Design.PluralizationServices" %>
<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Category="1.Database" Name="OnlyCreateEntity" Type="System.Boolean" Description="Chỉ tạo các folder entity" %>
<%@ Property Category="1.Database" Name="OnlyCreateFileNeedModify" Type="System.Boolean" Description="Chỉ tạo các file cần modify khi tạo mới 1 entity" %>
<%@ Property Name="ScopeService" Type="System.String" %>
<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Name="Csproj" Type="System.Boolean" Default="false" %>
<%@ Property Name="EntityAndDbContextPartial" Type="System.Boolean" Default="false" %>
<%@ Property Name="EntityNamespace" Type="System.String" Default="" %>
<%@ Property Name="CoreVersion" Type="System.String" %>
<%@ Property Name="DotNetCoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%@ Property Name="UsingOldTemplate" Type="System.Boolean" Default="false" %>

<%@ Register Name="Entity" Template="Entities\Entity.cst" %>
<%@ Register Name="DataContext" Template="DataContext\DataContext.cst" %>
<%@ Register Name="OverrideDataContext" Template="DataContext\OverrideDataContext.cst" %>

<%@ Register Name="EfRepository" Template="EfRepository.cst" %>
<%@ Register Name="Project" Template="Project.cst" %>
<%@ Register Name="DepedencyInjectionDatacontextExtension" Template="Configs\DepedencyInjectionDatacontextExtension.cst" %>
<%@ Register Name="MappingProfile" Template="Configs\MappingProfile.cst" %>

<%@ Property Name="MappingFieldAndTableFK" Optional="True" Type="System.String"%>
<%@ Register Name="CommonService" Template="..\CommonService.cst" %>

<% 
    CreateDataContext(); 
%>

<script runat="template">
   
    public void CreateDataContext() {
        Location = Path.GetFullPath(Location);
        
        string folderDataContext = Location + "\\" + ScopeService +  "\\" + ScopeService + ".DataContext";

        CreateProject(folderDataContext);
        CreateFolderEntities(folderDataContext);
        
        CreateGenerated(folderDataContext);
        RenderOverrideDataContext(folderDataContext);
    }


    private void CreateProject(string outPut) {
        var entityTemplate = this.Create<Project>();
        var fileName = String.Format("{0}\\{1}.csproj", outPut, ScopeService + ".DataContext");
        
        if (File.Exists(fileName) && Csproj) {
            File.Delete(fileName);
        }
        
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.CoreVersion = CoreVersion;
            entityTemplate.DotNetCoreVersion = DotNetCoreVersion;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
        
    public void CreateGenerated(string folderDataContext) {
        var folderOverride = folderDataContext + "\\Generated";
         if (!Directory.Exists(folderOverride))
            Directory.CreateDirectory(folderOverride);
         
         CreateFolderConfigs(folderOverride);
        CreateFolderDbContexts(folderOverride);
    }
    
    #region Create Configs
    public void CreateFolderConfigs(string outPut) {
        string folderConfigs = outPut + "\\Configs";
        
        if (!Directory.Exists(folderConfigs))
            Directory.CreateDirectory(folderConfigs);
        
        RenderConfigs(folderConfigs);
    }
    
    private void RenderConfigs(string outPut)
    {
        var entityTemplate = this.Create<DepedencyInjectionDatacontextExtension>();
    
        var fileName = String.Format("{0}\\{1}.cs", outPut, "DepedencyInjectionDatacontextExtension");
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
        
        
        var entityTemplateMapping = this.Create<MappingProfile>();
    
        var fileNameMapping = String.Format("{0}\\{1}.cs", outPut, "MappingProfile");
        if (!File.Exists(fileNameMapping))
		{
            this.CopyPropertiesTo(entityTemplateMapping);
            entityTemplateMapping.ScopeService = ScopeService;
            entityTemplateMapping.SourceTables = SourceTables;
            Response.WriteLine(fileNameMapping);
            entityTemplateMapping.RenderToFile(fileNameMapping, true);
		}
       
    }
    
    #endregion
    
    
    #region Create DataContext
    
     public void CreateFolderDbContexts(string outPut) {
        string folderConfigs = outPut + "\\DbContexts";
        
        if (!Directory.Exists(folderConfigs))
            Directory.CreateDirectory(folderConfigs);
        
          CreateDbContexts(folderConfigs);
    }
    
    public void CreateDbContexts(string outPut) {
        string folderDataContext = outPut;
        
        if (!Directory.Exists(folderDataContext))
            Directory.CreateDirectory(folderDataContext);
        RenderDataContext(folderDataContext);
    }
    
    private void RenderDataContext(string outPut)
    {
        var entityTemplate = this.Create<DataContext>();
    
        var fileName = String.Format("{0}\\{1}.cs", outPut, ScopeService + "DataContext");
        if (File.Exists(fileName)) {
                File.Delete(fileName);
        }
        
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    private void RenderOverrideDataContext(string outPut)
    {
        var entityTemplate = this.Create<OverrideDataContext>();
        var fileName = String.Format("{0}\\{1}.cs", outPut, ScopeService + "DataContext");
        
        if (File.Exists(fileName) && EntityAndDbContextPartial) {
                File.Delete(fileName);
        }  
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    #endregion
    
    #region Create Entities
    public void CreateFolderEntities(string outPut) {
        string folderEntities = outPut + "\\Entity";
        
        if (!Directory.Exists(folderEntities))
            Directory.CreateDirectory(folderEntities);
        RenderEntities(folderEntities);
    }
    
    private void RenderEntities(string outPut)
    {
        var entityTemplate = this.Create<Entity>();
        for (int i = 0; i < SourceTables.Count; i++) {
            var entity = SourceTables[i];
            var fileName = String.Format("{0}\\{1}.cs", outPut, CommonService.SingularizeString(entity.Name, UsingSingularizeString));
            
            if (File.Exists(fileName)) {
                File.Delete(fileName);
            }
            
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                entityTemplate.RenderToFile(fileName, true);
    		}
         }
    }
    
    
    #endregion
    
   
    
</script>