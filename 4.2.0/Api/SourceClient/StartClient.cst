<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>


<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Category="1.Database" Name="OnlyCreateEntity" Type="System.Boolean" Description="Chỉ tạo các folder entity" %>
<%@ Property Category="1.Database" Name="OnlyCreateFileNeedModify" Type="System.Boolean" Description="Chỉ tạo các file cần modify khi tạo mới 1 entity" %>
<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
  <%@ Property Name="Csproj" Type="System.Boolean" Default="false" %>
  <%@ Property Name="ServicePartial" Type="System.Boolean" Default="false" %>
  <%@ Property Name="DotNetCoreVersion" Type="System.String"  %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>

<%@ Register Name="EntityDto" Template="Entities\EntityDto.cst" %>
<%@ Register Name="EntityFilterDto" Template="Entities\EntityFilterDto.cst" %>
<%@ Register Name="Project" Template="Project.cst" %>
  

<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%@ Register Name="CommonService" Template="..\CommonService.cst" %>

<% CreateClient(); %>
<script runat="template">
   
    public void CreateClient() {
        Location = Path.GetFullPath(Location);
        string folderService = Location + "\\" + ScopeService +  "\\" + ScopeService + ".Client";

        CreateProject(folderService);    
        CreateFolderDto(folderService);
    }
    
    private void CreateProject(string outPut) {
        var entityTemplate = this.Create<Project>();
        var fileName = String.Format("{0}\\{1}.csproj", outPut, ScopeService + ".Client");
        
        if (File.Exists(fileName) && Csproj) {
            File.Delete(fileName);
        }  
        
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.DotNetCoreVersion = DotNetCoreVersion;
            entityTemplate.CoreVersion = CoreVersion;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    #region Filters
    
    public void CreateFolderDto(string outPut) {
        string folderContextGenerated = outPut + "\\Dto";

        if (File.Exists(folderContextGenerated))
            File.Delete(folderContextGenerated);

        Directory.CreateDirectory(folderContextGenerated);
        CommonService.DeleteFiles(folderContextGenerated);

        Directory.Delete(folderContextGenerated, true);
        
        RenderEntitieDto(folderContextGenerated);
       
        
    }

    
     private void RenderEntitieDto(string outPut)
    {
        
        var entityTemplate = this.Create<EntityDto>();
        for (int i = 0; i < SourceTables.Count; i++) {
            var entity = SourceTables[i];
            
            string folderEntityDto = outPut + "\\" + CommonService.SingularizeString(entity.Name, UsingSingularizeString);
            
            
            var fileName = String.Format("{0}\\{1}Dto.cs", folderEntityDto, CommonService.SingularizeString(entity.Name, UsingSingularizeString));
            
            if (File.Exists(fileName)) {
                File.Delete(fileName);
            }
            
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                entityTemplate.RenderToFile(fileName, true);
    		}
            
            
            RenderEntitieFilters(folderEntityDto,entity);
            
         }
    }
    
    
    private void RenderEntitieFilters(string outPut, TableSchema entity)
    {
        var entityTemplate = this.Create<EntityFilterDto>();
        //for (int i = 0; i < SourceTables.Count; i++) {
            //var entity = SourceTables[i];
            var fileName = String.Format("{0}\\{1}FilterDto.cs", outPut, CommonService.SingularizeString(entity.Name, UsingSingularizeString));
            
            if (File.Exists(fileName)) {
                File.Delete(fileName);
            }
            
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                entityTemplate.RenderToFile(fileName, true);
    		}
        // }
    }
    
    #endregion
    
   

</script>