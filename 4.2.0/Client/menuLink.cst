<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\Common" %>
<%@ Assembly Name="Newtonsoft.Json.dll" Path="..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Property Name="EntityNamespace" Type="System.String" Default="" %>
<%@ Property Category="Table" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Name="IsVietNameseTableSetting" Type="System.Boolean" Default="false" Description="Sử dụng tên bảng kiểu VietNam (Ngăn cách nhau bởi dấu _ ) "%>

<%@ Register Name="CommonService" Template=".\CommonService.cst" %>

import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { MenuService } from 'tn-shared';

@Injectable({
    providedIn: 'root'
})
export class <%=CommonService.GetModuleName(EntityNamespace)%>MenuService {

    constructor(private _translateService: TranslateService, private _menuService: MenuService) { }

    getMenuItems(): any[] {
        return <any[]>[
            {
                label: this._menuService.getLongModuleName('<%=CommonService.GetModuleName(EntityNamespace).ToUpper()%>'),
                isRootMenu: true
            },
            <%=RenderMenuLink()%>
        ];
    }
}

<script runat="template">
    private string RenderMenuLink() {
        string result = "";
        string lastString = ",\n";
        for(int i = 0; i < SourceTables.Count; i++) {
            result += RenderMenuByTable(SourceTables[i], lastString, EntityNamespace);
        }
        if (result.Length > 0) {
            result = result.Substring(0, result.Length - lastString.Length).Substring(Tab(3, false).Length);
        }
        return result;
    }
    private string RenderMenuByTable(TableSchema table, string lastString, string module) {
        string result = Tab(3, false) + "{"
                        + Tab(4) + "label: this._translateService.instant('" + CommonService.GetDescription(table.Description) + "'),"
                        + Tab(4) + "icon: 'fas fa-th-large',"
                        + Tab(4) + "routerLink: '/" + module + "/" + table.Name.Replace("_", "-").ToLower() + "'"
                        + Tab(3) + "}" + lastString;
        return result;
    }
    private string Tab(int tab, bool haveNewRow = true) {
        string result = "";
        if (haveNewRow)
            result = "\n";
        for(int i = 0; i < tab; i++)
            result += "\t";
        return result;
    }
</script>