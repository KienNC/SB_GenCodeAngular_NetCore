<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Property Category="Table" Name="SourceDatabase" Type="DatabaseSchema" Description="Đường dẫn connection string" %>
<%@ Property Category="Table" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>

<%@ Property Category="Popup" Name="popupWidth" Default="600" Type="System.Int32" Description="Chiều rộng của popup form detail (nếu file config không override)"%>
<%@ Property Category="Popup" Name="popupHeight" Default="400" Type="System.Int32" Description="Chiều cao của popup form detail (nếu file config không override)"%>

<%@ Property Category="Options" Name="IsVietNameseTableSetting" Type="System.Boolean" Default="false" Description="Sử dụng tên bảng kiểu VietNam (Ngăn cách nhau bởi dấu _ )"%>
<%@ Property Category="Options" Name="ClearFolder" Type="System.Boolean" Default="false" Description="Xóa toàn bộ trong folder output trước khi generate"%>

<%@ Property Name="Endpoint" Type="System.String" Description="ENDPOINT. Trong code sẽ sinh tự động endpoint trong file service là ${environment.apiDomain.[ENDPOINT]Endpoint}/[tableName]" %>

<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Register Name="StartFormTemplate" Template="SourceForm\StartForm.cst" %>
<%@ Register Name="StartListTemplate" Template="SourceList\StartList.cst" %>
<%@ Register Name="RoutingTemplate" Template="routing.cst" %>
<%@ Register Name="ParentModuleTemplate" Template="parentmodule.cst" %>
<%@ Register Name="MenuLinkTemplate" Template="menuLink.cst" %>

<%@ Register Name="CommonService" Template="CommonService.cst" %>

<%CreateApp();%>

<script runat="template">
    public void CreateApp() {
        Location = Path.GetFullPath(Location);
        string folderApp = Location + "\\" + EntityNamespace;
        string locationConfigFile = Directory.GetCurrentDirectory() + "\\config.json";
        var config = JsonConvert.DeserializeObject<ConfigGenerate>(File.ReadAllText(locationConfigFile));
        //File.WriteAllText(folderApp + "\\log.txt", CommonService.GetJson(SourceDatabase.Tables[0].Columns[0].Description));
        CreateFolderSolution(folderApp, config);
    }
    private void CreateFolderSolution(string outPut, ConfigGenerate config) {
        if (!Directory.Exists(outPut))
            Directory.CreateDirectory(outPut);
        if (ClearFolder) {
            DirectoryInfo di = new DirectoryInfo(outPut);
            foreach (FileInfo file in di.GetFiles())
            {
                file.Delete(); 
            }
            foreach (DirectoryInfo dir in di.GetDirectories())
            {
                dir.Delete(true); 
            }
        }
        RenderForm(outPut, config);
        RenderList(outPut, config);
        RenderRouting(outPut);
        RenderModule(outPut);
        RenderMenuLink(outPut);
    }
    private void RenderForm(string outPut, ConfigGenerate config)
    {
        var entityTemplate = this.Create<StartFormTemplate>();    
        this.CopyPropertiesTo(entityTemplate);     
        entityTemplate.SourceDatabase = SourceDatabase;
        entityTemplate.SourceTables = SourceTables;
        entityTemplate.Config = config;
        entityTemplate.EntityNamespace = EntityNamespace;
        entityTemplate.Location = outPut;
        entityTemplate.popupWidth = popupWidth;
        entityTemplate.popupHeight = popupHeight; 
        entityTemplate.CreateFolderForm();
    }
    private void RenderList(string outPut, ConfigGenerate config)
    {
        var entityTemplate = this.Create<StartListTemplate>();
        this.CopyPropertiesTo(entityTemplate);     
        entityTemplate.SourceDatabase = SourceDatabase;
        entityTemplate.SourceTables = SourceTables;
        entityTemplate.Config = config;
        entityTemplate.EntityNamespace = EntityNamespace;
        entityTemplate.Location = outPut;
        entityTemplate.Endpoint = Endpoint;
        entityTemplate.CreateFolderList();
    }
    private void RenderRouting(string outPut)
    {
        var fileName = String.Format("{0}\\{1}.ts", outPut, EntityNamespace + ".routing");
        if(!File.Exists(fileName))
        {
            var routing = this.Create<RoutingTemplate>();
            this.CopyPropertiesTo(routing);     
            routing.SourceDatabase = SourceDatabase;
            routing.SourceTables = SourceTables;
            routing.EntityNamespace = EntityNamespace;
            routing.RenderToFile(fileName,true);
        }
    }
    private void RenderModule(string outPut)
    {
        var fileName = String.Format("{0}\\{1}.ts", outPut, EntityNamespace + ".module");
        if(!File.Exists(fileName))
        {
            var module = this.Create<ParentModuleTemplate>();
            this.CopyPropertiesTo(module);
            module.EntityNamespace = EntityNamespace;
            module.RenderToFile(fileName,true);
        }
    }
    private void RenderMenuLink(string outPut)
    {
        var fileName = String.Format("{0}\\{1}-menu.service.ts", outPut, EntityNamespace);
        if(!File.Exists(fileName))
        {
            var module = this.Create<MenuLinkTemplate>();
            this.CopyPropertiesTo(module);     
            module.EntityNamespace = EntityNamespace;
            module.RenderToFile(fileName, true);
        }
    }

    public class ConfigGenerate {
        public string[] FieldIgnores { get; set; }
        public Dictionary<string, TableConfig> Configs { get; set; }
    }

    public class TableConfig {
        public string[] FieldIgnores { get; set; }
    }
</script>