<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>

<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="Newtonsoft.Json" %>

<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Category="Config" Name="Config" Type="ConfigGenerate" Description="Cấu hình chung của genecode" %>

<%@ Register Name="CommonService" Template="..\CommonService.cst" %>
<%@ Property Name="IsVietNameseTableSetting"  Type="System.Boolean" Default="false" Description="Sử dụng tên bảng kiểu VietNam (Ngăn cách nhau bởi dấu _ ) "%>
import { Component } from '@angular/core';
import { NzModalService } from 'ng-zorro-antd/modal';
import { NzNotificationService } from 'ng-zorro-antd/notification';
import { NgxSpinnerService } from 'ngx-spinner';
import { BaseListComponent } from 'src/app/constants/baseListComponent';
import { GridColumn } from 'src/app/constants/form-schema';
import { FormRoleComponent } from 'src/app/pages/quantri/role/role-edit/form-role.component';
import { <%=SourceTable.Name%>Service } from 'src/app/services/setting/course/course.service';
import { McourseEditComponent } from './mcourse-edit/mcourse-edit.component';
import { MESSAGE } from 'src/app/constants/message';

@Component({
  selector: 'app-<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-list',
  templateUrl: './<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-list.component.html',
  styleUrls: ['./<%=CommonService.GetNameFile(SourceTable.Name,IsVietNameseTableSetting)%>-list.component.scss']
})
export class <%=SourceTable.Name%>ListComponent extends BaseListComponent {
  constructor(
    private _modalService: NzModalService,
    private _notification: NzNotificationService,
    private spinner: NgxSpinnerService,
    private _<%=LowerFirstChar(SourceTable.Name)%>Service: <%=SourceTable.Name%>Service
  ) {
    super()
  }
  
  ngOnInit() {
    this.gridColums = [
    <%=renderFieldInGrid()%>
    ];
   this.gridLoadData();
  }

  gridLoadData() {
    let filter = {
      ... this.getGridOption(),
      ...this.searchInput
    }
    
    this._<%=LowerFirstChar(SourceTable.Name)%>Service.timTheoDieuKien(filter).subscribe(res=>{
      if(res.success){
        this.gridData = res.data;
        this.totalRecord = res.totalRecord
      }
    })
  }
  
  changePageSize(event) {
    this.pageSize = event;
    this.gridLoadData()
  }
  
  changePageIndex(event) {
    this.page = event;
    this.gridLoadData()
  }

  onAddNew() {
    let modal = this._modalService.create({
      nzTitle: 'Thêm mới',
      nzContent: <%=SourceTable.Name%>EditComponent,
      nzClosable: true,
      nzFooter: null,
      nzStyle: { top: '50px' },
      nzWidth: 1000,
    });
    modal.afterClose.subscribe(res => {
      if (res) {
        this.gridLoadData();
      }
    });
  }

  onEdit(id) {
    let modal = this._modalService.create({
      nzTitle: 'Cập nhật',
      nzContent: <%=SourceTable.Name%>EditComponent,
      nzClosable: true,
      nzFooter: null,
      nzStyle: { top: '50px' },
      nzWidth: 1000,
      nzComponentParams: { id },
    });
    modal.afterClose.subscribe(res => {
      if (res) {
        this.gridLoadData();
      }
    });
  }

  onDelete(id) {
    this._modalService.confirm({
      nzClosable: false,
      nzTitle: 'Xác nhận',
      nzContent: 'Bạn có chắc chắn muốn xóa?',
      nzOkText: 'Đồng ý',
      nzCancelText: 'Không',
      nzOkDanger: true,
      nzWidth: 310,
      nzOnOk: () => {
        this.spinner.show();
        this._<%=LowerFirstChar(SourceTable.Name)%>Service.delete(id).subscribe(res=>{
          this.spinner.hide()
          if(res.success){
            this._notification.success(MESSAGE.SUCCESS,MESSAGE.DELETE_SUCCESS)
            this.gridLoadData();
          }         
        })    
      }
    });
  }

  search(): void {
    this.gridLoadData()
  }
}

<script runat="template">
    private string GetDataFormat(string dataType) {
        dataType = dataType.ToLower();
        string result = "";
        switch (dataType)
        {
            case "system.datetime":
                result = "dataType: 'date'";
                break;  
            case "system.date":
                result = "dataType: 'date'";
                break;  
            case "system.short":  
            case "system.int32":
            case "system.int64":
            case "system.decimal":
            case "system.double":
            case "system.long":
                result = "dataType: 'number'";
                break;
			case "system.boolean":
                result = "dataType: 'boolean'";
                break;
        }
        return result;
    }
    private string LowerFirstChar(string Value) {
        return Char.ToLowerInvariant(Value[0]) + Value.Substring(1);
    }
    private string renderFieldInGrid()
    {
        string fields = "\t";
        string lastString = ",\n\t\t";
        string breakFirstColumn= "\n\t\t\t";
        string breakColumn= ",\n\t\t\t";
        var columnIgnores = Config.FieldGridIgnores.ToList();
        for (int i = 0; i < SourceTable.Columns.Count; i++)
        {
            string field = SourceTable.Columns[i].Name;
            string fieldLower = field.ToLower();
            if (columnIgnores.Any(q => q.ToLower() == fieldLower))
                continue;
            string name = LowerFirstChar(field);
            string dataFormat = GetDataFormat(SourceTable.Columns[i].SystemType.ToString());
            fields += "new GridColumn({"+breakFirstColumn+"field: '"+name+"'"+breakColumn+"header: '"+name+"'"+breakColumn+"thWidth: '120px'"+breakColumn+"class: '"+getClassColumn(SourceTable.Columns[i].DataType.ToString())+"'"+breakColumn+GetDataFormat(SourceTable.Columns[i].SystemType.ToString()) +"\n\t\t})" + lastString;
        }
        if (fields.Length > 1)
        {
            return fields.Substring(0, fields.Length - lastString.Length);
        }
        return fields;
    }
    private string getClassColumn(string dataType){
        dataType = dataType.ToLower();
        string result = "";
        switch (dataType)
        {
            case "datetime":
            case "time":
            case "timespan": 
            case "date":
                result = "text-center";
                break;       
            case "int32":
            case "int64":
            case "decimal":
            case "double":
            case "long":
                result = "text-right";
                break;
			case "boolean":
               result = "text-center";
                break;
            default:
                result = "text-left";
                break;
        };
        return result;
    }
</script>
    