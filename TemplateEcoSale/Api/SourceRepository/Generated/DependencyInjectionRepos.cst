<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>
<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>

<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>
<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>

<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%=CommonService.GenerateAuthor(CoreVersion, Author)%>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using <%=ScopeService %>.Repository.Interfaces;
using <%=ScopeService %>.DataContext.Configs;


namespace <%=ScopeService %>.Repository.Configs
{

    public static class DependencyInjectionRepositoryExtension
    {
        public static void DependencyInjectionRepository(this IServiceCollection services, IConfiguration configuration, string connectionString)
        {
            services.DepedencyInjectionDatacontext(configuration, connectionString);
            DIAdditionalRepos.AddDI(services, configuration, connectionString);

        <% for (int i = 0; i < SourceTables.Count; i++) { %>
            services.AddScoped<<%="I" + CommonService.SingularizeString(SourceTables[i].Name, UsingSingularizeString) + "Repos" %>, <%=CommonService.SingularizeString(SourceTables[i].Name, UsingSingularizeString) + "Repos" %>>();
        <%} %>
        }
    }
}

