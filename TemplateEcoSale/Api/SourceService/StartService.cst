<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>


<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Category="1.Database" Name="OnlyCreateEntity" Type="System.Boolean" Description="Chỉ tạo các folder entity" %>
<%@ Property Category="1.Database" Name="OnlyCreateFileNeedModify" Type="System.Boolean" Description="Chỉ tạo các file cần modify khi tạo mới 1 entity" %>
<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="Csproj" Type="System.Boolean" Default="false" %>
<%@ Property Name="ServicePartial" Type="System.Boolean" Default="false" %>
<%@ Property Name="DotNetCoreVersion" Type="System.String"  %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>




<%@ Register Name="BaseService" Template="BaseService.cst" %>
<%@ Register Name="DependencyInjectionService" Template="Generated/DependencyInjectionService.cst" %>


<%@ Register Name="Service" Template="Generated/ServiceGenerated.cst" %>
<%@ Register Name="Interface" Template="Generated/Interface.cst" %>

<%@ Register Name="Project" Template="Project.cst" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%@ Register Name="CommonService" Template="..\CommonService.cst" %>
    
<% CreateService(); %>
<script runat="template">
   
    public void CreateService() {
        Location = Path.GetFullPath(Location);
        string folderService = Location + "\\" + ScopeService +  "\\" + ScopeService + ".Services";

        CreateProject(folderService);
        CreateFolderGenerated(folderService);
       
    }
    
     private void CreateProject(string outPut) {
        var entityTemplate = this.Create<Project>();
        var fileName = String.Format("{0}\\{1}.csproj", outPut, ScopeService + ".Service");
        
        if (File.Exists(fileName) && Csproj) {
            File.Delete(fileName);
        }
        
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.CoreVersion = CoreVersion;
            entityTemplate.DotNetCoreVersion = DotNetCoreVersion;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    
    #region Create Entity Service
      public void CreateFolderGenerated(string outPut) {
        string folderServiceGenerated = outPut + "\\Generated";
        
        if (File.Exists(folderServiceGenerated))
		{
            File.Delete(folderServiceGenerated);
		}

        Directory.CreateDirectory(folderServiceGenerated);

        CommonService.DeleteFiles(folderServiceGenerated);
        
        //1. Create Folder Configs
        CreateFolderGeneratedConfigs(folderServiceGenerated);
        
        //2. Create BaseService
        CreateBaseService(folderServiceGenerated);
        
         //3. Create EntityService
        RenderEntitiesService(folderServiceGenerated);
       
    }

    //1. Create Folder Configs
    public void CreateFolderGeneratedConfigs(string outPut) {
        string FolderServiceOverrides = outPut + "\\Configs";
        
        if (!Directory.Exists(FolderServiceOverrides))
            Directory.CreateDirectory(FolderServiceOverrides);
        CreateGeneratedDepedencyInjectionService(FolderServiceOverrides);
      
    }

    //1.1 Create DependencyInjectionService.cs
    private void CreateGeneratedDepedencyInjectionService(string outPut)
    {
        var entityTemplate = this.Create<DependencyInjectionService>();
        var fileName = String.Format("{0}\\{1}.cs", outPut, "DependencyInjectionService");
        if (File.Exists(fileName))
		{
            File.Delete(fileName);
		}
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            // entityTemplate.SourceTable = entity;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    //2. Create BaseService
    private void CreateBaseService(string outPut)
    {
        var entityTemplate = this.Create<BaseService>();
        var fileName = String.Format("{0}\\{1}.cs", outPut, "BaseService");
        if (File.Exists(fileName))
		{
            File.Delete(fileName);
		}
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            // entityTemplate.SourceTable = entity;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
   
    //3. Create EntityService  
    private void RenderEntitiesService(string outPut)
    {
        var entityTemplate = this.Create<Service>();
        for (int i = 0; i < SourceTables.Count; i++) {
            var entity = SourceTables[i];
            var fileName = String.Format("{0}\\{1}.cs", outPut, CommonService.SingularizeString(entity.Name, true) + "Service");
            
            if (File.Exists(fileName)) {
                File.Delete(fileName);
            }
            
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                entityTemplate.RenderToFile(fileName, true);
    		}
         }
    }
      
 #endregion
   
    



    
  

    
   
    

    


</script>