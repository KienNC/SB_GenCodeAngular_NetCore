<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>

<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>


<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>

using SB.Core;
using SB.Core.Token;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using System.Reflection;



namespace <%=ScopeService %>.API.Controllers
{
    [SBAuthorize("Đồng bộ quyền")]
    [Route("api/[controller]")]
    [ApiController]
    public partial class DongBoQuyenController : BaseController
    {
        private readonly IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
        protected readonly IServiceProvider _serviceProvider;

       
        public DongBoQuyenController(IServiceProvider serviceProvider, IActionDescriptorCollectionProvider actionDescriptorCollectionProvider) 
        {
            _serviceProvider = serviceProvider;
            _actionDescriptorCollectionProvider = actionDescriptorCollectionProvider;
           
        }
        
        /// <summary>
        /// Lấy tất cả chức năng có trong service
        /// </summary>
        /// <returns></returns>
        [HttpGet("LayTatCaQuyenAsync")]
        [AllowAnonymous]
        public async Task<IActionResult> DongBoDuLieu()
        {

            var items = _actionDescriptorCollectionProvider
               .ActionDescriptors.Items
               .OfType<ControllerActionDescriptor>()
               .Select(descriptor => descriptor)
               .GroupBy(descriptor => descriptor.ControllerTypeInfo.FullName)
               .ToList();
            var _mvcControllers = new List<object>();
            foreach (var actionDescriptors in items)
            {
                
                var actionDescriptor = actionDescriptors.First();
                var controllerTypeInfo = actionDescriptor.ControllerTypeInfo;
                if (!controllerTypeInfo.GetCustomAttributes<SBAuthorizeAttribute>().Any()) continue;

                var currentController = new PermisionModel
                {
                    KeyCode = $"{actionDescriptor.ControllerName.ToUpper()}",
                    Ten = "",
                    Controller = actionDescriptor.ControllerName,
                    GroupName = controllerTypeInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.GroupName ?? "",
                    MoTa = ""
                };
                _mvcControllers.Add(currentController);


                foreach (var descriptor in actionDescriptors.GroupBy(a => a.ActionName).Select(g => g.First()))
                {
                    var methodInfo = descriptor.MethodInfo;
                    if (IsProtectedAction(controllerTypeInfo, methodInfo) && !string.IsNullOrEmpty(methodInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.Quyen))
                    {
                        _mvcControllers.Add(new PermisionModel
                        {
                            KeyCode = $"{actionDescriptor.ControllerName.ToUpper()}_{methodInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.Quyen.ToUpper()}",
                            GroupName = methodInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.GroupName ?? "",
                            Controller = actionDescriptor.ControllerName,
                            Ten = $"{methodInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.Quyen}",
                            MoTa = $"{methodInfo.GetCustomAttribute<SBAuthorizeAttribute>()?.MoTa}",

                        });
                    }
                       
                }

            }

            return ResponseResult(MethodResult<object>.ResultWithData(_mvcControllers));

        }

        private static bool IsProtectedAction(MemberInfo controllerTypeInfo, MemberInfo actionMethodInfo)
        {

            if (actionMethodInfo.GetCustomAttributes<SBAuthorizeAttribute>().Any<SBAuthorizeAttribute>())
                return true;
            return false;
        }

    }
}

