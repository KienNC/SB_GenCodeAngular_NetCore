<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="true" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\..\Common" %>

<%@ Import Namespace="CodeSmith.SchemaHelper" %>
<%@ Import Namespace="Generator.QuickStart" %>
<%@ Import Namespace="Generator.Microsoft.Frameworks" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>


<%@ Register Name="CommonService" Template="..\..\CommonService.cst" %>
<%@ Property Name="SourceTable" Type="TableSchema"  %>
<%@ Property Optional="False" Name="ScopeService" Type="System.String" Category="2.Common" Description="Tên dịch vụ" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>
<%=CommonService.GenerateAuthor(CoreVersion, Author)%>

using SB.Core;
using SB.Core.Helpers;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;
using <%=ScopeService %>.Core.Mapper;
using <%=ScopeService %>.DataContext.Entity;
using <%=ScopeService %>.Client.Dto;


namespace <%=ScopeService %>.Services.Generated
{


    public partial interface <%="I" + CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) + "Service" %> : IBaseService<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>>
	{
     Task<IMethodResult<object>> TimTheoDieuKienAsync(<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>FilterDto gridInfo);
	}


    public partial class <%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) + "Service" %> : BaseService<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>>, <%= "I" + CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) + "Service" %>
	{
      
        private readonly IRepository<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>> _repos;
       
        public <%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) + "Service" %>(IRepository<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>> repos) : base(repos)
        {
            _repos = repos;
          
        }
        
        public override async Task<IMethodResult<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>>> UpdateAsync(<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString)%> item)
        {
            <% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
                if (SourceTable.Columns[i].Name != "Id" && 
                SourceTable.Columns[i].Name != "CreatedBy" && 
                SourceTable.Columns[i].Name != "ModifiedBy" && 
                SourceTable.Columns[i].Name != "Created" && 
                SourceTable.Columns[i].Name != "IsDeleted" && 
                SourceTable.Columns[i].Name != "Modified") {
            %>
            item.MarkDirty(nameof(item.<%= SourceTable.Columns[i].Name%>));
           <%
                }
               } %>

            var result = await base.UpdateAsync(item);
            return result;
        }
        
        public async Task<IMethodResult<object>> TimTheoDieuKienAsync(<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>FilterDto gridInfo)
        {
            var query = _repos.TableNoTracking;

            var total = query.Count();
            if (gridInfo.Sorts != null && gridInfo.Sorts.Any())
            {
                query = query.OrderBy(b => b.NgayTao);
            }
            else
            {
                query = query.OrderBy(b => b.NgayTao);
            }
            var data = await query.Skip((gridInfo.PageInfo.Page - 1) * gridInfo.PageInfo.PageSize).Take(gridInfo.PageInfo.PageSize)
                .Select(b => AutoMapperConfiguration.Mapper.Map<<%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>, <%= CommonService.SingularizeString(SourceTable.Name, UsingSingularizeString) %>Dto>(b)).ToListAsync();

            return MethodResult<object>.ResultWithData(data, "", total);
        }

       
	}
}