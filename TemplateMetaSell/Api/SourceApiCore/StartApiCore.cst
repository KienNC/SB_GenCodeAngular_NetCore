<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Inherits="EntityCodeTemplate" CompilerVersion="v3.5" Encoding="UTF-8" Description="EF Entity" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.SchemaHelper" Path="..\..\Common" %>
<%@ Assembly Name="Generator.QuickStart" Path="..\..\Common" %>
<%@ Assembly Name="Generator.Microsoft.Frameworks" Path="..\..\Common" %>
<%@ Assembly Name="Xml.Schema.Linq" Path="..\..\Common" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Category="1.Database" Name="SourceDatabase" Type="DatabaseSchema" %>
<%@ Property Category="1.Database" Name="SourceTables" Type="TableSchemaCollection" Description="Danh sách các bảng muốn gen code" %>
<%@ Property Category="1.Database" Name="OnlyCreateEntity" Type="System.Boolean" Description="Chỉ tạo các folder entity" %>
<%@ Property Category="1.Database" Name="OnlyCreateFileNeedModify" Type="System.Boolean" Description="Chỉ tạo các file cần modify khi tạo mới 1 entity" %>
<%@ Property Name="IsCoreProject" Type="System.Boolean" Default="false"  %>
<%@ Property Name="ScopeName" Type="System.String" %>
<%@ Property Name="DotNetCoreVersion" Type="System.String"  %>
<%@ Property Name="ProjectPortPrefix" Type="System.String" %>
<%@ Property Name="CoreVersion" Type="System.String"  %>
<%@ Property Name="Author" Type="System.String"  %>

<%@ Property Name="Location" Type="System.String"
    Default="" Optional="False" Category="Output"
    Description="This is the path to the Solution location."
    Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="ScopeService" Type="System.String" %>
<%@ Property Name="Csproj" Type="System.Boolean" Default="false" %>
<%@ Property Name="ControllerPartial" Type="System.Boolean" Default="false" %>
<%@ Property Name="IsStartup" Type="System.Boolean" Default="false" %>
<%@ Property Name="IsProgram" Type="System.Boolean" Default="false" %>
<%@ Property Name="DebugPersonalEnvironment" Type="System.String" %>
<%@ Property Name="DebugPort" Type="System.String" %>
<%@ Property Name="DebugEtcdConfig" Type="System.String" Description="Etcd Connectionstring" Category="4.Debug"  %>
<%@ Property Name="DebugDeploymentServerIP" Type="System.String" %>


<%@ Register Name="BaseController" Template="Controller\BaseController.cst" %>
<%@ Register Name="DongBoQuyenController" Template="Controller\DongBoQuyenController.cst" %>
<%@ Register Name="Controller" Template="Controller\Controller.cst" %>
<%@ Register Name="BaseDanhMucController" Template="Controller\BaseDanhMucController.cst" %>
<%@ Register Name="ControllerGenerated" Template="Generated\ControllerGenerated.cst" %>
<%@ Register Name="TaskProcessBulkHandler" Template="IntegrationEvents\TaskProcessBulkHandler.cst" %>

<%@ Register Name="ServicesExtention" Template="Helper\ServicesExtention.cst" %>
<%@ Register Name="SwaggerExtention" Template="Helper\SwaggerExtention.cst" %>

<%@ Register Name="Program" Template="Program.cst" %>
<%@ Register Name="Startup" Template="Startup.cst" %>
<%@ Register Name="Startups" Template="Startups.cst" %>
<%@ Register Name="Project" Template="Project.cst" %>
<%@ Register Name="Appsettings" Template="Appsettings.cst" %>
<%@ Register Name="Dockerfile" Template="Dockerfile.cst" %>
<%@ Register Name="Docker_build_and_push" Template="Docker_build_and_push.cst" %>
<%@ Register Name="LaunchSettings" Template="launchSettings.cst" %>
<%@ Property Name="UsingSingularizeString" Type="System.Boolean" Default="true" %>

<%@ Register Name="CommonService" Template="..\CommonService.cst" %>

<% CreateApiCore(); %>
<script runat="template">
   
    public void CreateApiCore() {
        Location = Path.GetFullPath(Location);
        
        string folderApiCore = Location + "\\" + ScopeService +  "\\" + ScopeService + ".API";

        //1 Tạo File Project
        CreateProject(folderApiCore);
        
        //2 Tạo thư mục Controller
        CreateFolderController(folderApiCore);
        
        //3 Tạo thư mục Helper
        CreateFolderHelper(folderApiCore);
        
        //4 Tạo File appsetting.json
        CreateAppsettings(folderApiCore);
        
        //5 Tạo File Dockerfile
        
        //6 Tạo file Programe.cs
        RenderProgram(folderApiCore);
    }

    public void CreateIntegrationEvents(string outPut) {
        string folderIntegrationEvents = outPut + "\\IntegrationEvents";
        
        if (!Directory.Exists(folderIntegrationEvents))
            Directory.CreateDirectory(folderIntegrationEvents);
        
        CreateFolderEventHandling(folderIntegrationEvents);
    }

     public void CreateFolderEventHandling(string outPut) {
        string folderEventHandling = outPut + "\\EventHandling";
        
        if (!Directory.Exists(folderEventHandling))
            Directory.CreateDirectory(folderEventHandling);
        RenderStartupsEventHandling(folderEventHandling);
    }

    private void RenderStartupsEventHandling(string outPut)
    {
        var entityTemplate = this.Create<TaskProcessBulkHandler>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut, "TaskProcessBulkHandler");
        Response.WriteLine("Is override startup: " + IsStartup);
        if (!File.Exists(fileName) || IsStartup)
		{
            this.CopyPropertiesTo(entityTemplate);
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }

    public void CreateFolderGenerated(string outPut) {
        string folderReposGenerated = outPut + "\\Generated";
        
        if (!Directory.Exists(folderReposGenerated)) {
             Directory.CreateDirectory(folderReposGenerated);
        }

        
       // RenderContextGenerated(folderReposGenerated);
       CreateFolderGeneratedController(folderReposGenerated);

    }

    public void CreateFolderGeneratedController(string outPut) {
        string FolderControllerOverrides = outPut + "\\Controllers";
        
        if (!Directory.Exists(FolderControllerOverrides))
            Directory.CreateDirectory(FolderControllerOverrides);
        CreateGeneratedControllers(FolderControllerOverrides);
      
    }

    public void CreateGeneratedControllers(string outPut) {
        string folderControllers = outPut;
        
        if (!Directory.Exists(folderControllers))
            Directory.CreateDirectory(folderControllers);
        
        // CreateOverride(folderEntities);
        
        RenderGeneratedController(folderControllers);
        //RenderOverrideEntities(folderEntities + "\\Overrides");
    }

    private void RenderGeneratedController(string outPut)
    {
        var entityTemplate = this.Create<ControllerGenerated>();
        this.CopyPropertiesTo(entityTemplate);
        for (int i = 0; i < SourceTables.Count; i++) {
            var entity = SourceTables[i];
            var fileName = String.Format("{0}\\{1}.cs", outPut, CommonService.SingularizeString(entity.Name, true) + "Controller");
            
            if (File.Exists(fileName)) {
                File.Delete(fileName);
            }
            
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                entityTemplate.RenderToFile(fileName, true);
    		}
        }
    }
    
    private void CreateProject(string outPut) {
        var entityTemplate = this.Create<Project>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.csproj", outPut, ScopeService + ".API");
        
        if (File.Exists(fileName) && Csproj) {
            File.Delete(fileName);
        }
        
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.DotNetCoreVersion = DotNetCoreVersion;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    private void CreateAppsettings(string outPut) {
        var entityTemplate = this.Create<Appsettings>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.json", outPut, "appsettings");
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    private void CreateDockerBuildAndPush(string outPut) {
        var entityTemplate = this.Create<Docker_build_and_push>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.bat", outPut, "docker_build_and_push");
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.ScopeName = ScopeName;
            entityTemplate.IsCoreProject = IsCoreProject;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
     private void CreateDockerFile(string outPut) {
        var entityTemplate = this.Create<Dockerfile>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}", outPut, "Dockerfile");
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.RenderToFile(fileName, true);
		}
    }
     
     
    
    private void RenderStartup(string outPut)
    {
        var entityTemplate = this.Create<Startup>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut, "Startup");
        
        if (File.Exists(fileName) && IsStartup) {
            File.Delete(fileName);
        }
        
        if (!File.Exists(fileName)) {
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.RenderToFile(fileName, true);
        }
    }
    
    private void RenderProgram(string outPut)
    {
        var entityTemplate = this.Create<Program>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut, "Program");
        
        if (!File.Exists(fileName) || IsProgram) {
           this.CopyPropertiesTo(entityTemplate);
           entityTemplate.ScopeService = ScopeService;
           Response.WriteLine(fileName);
           entityTemplate.RenderToFile(fileName, true);
        }
    }
    
    #region Create Startups
    public void CreateFolderStartups(string outPut) {
        string folderStartups = outPut + "\\Startups";
        
        if (!Directory.Exists(folderStartups))
            Directory.CreateDirectory(folderStartups);
        
        RenderStartups(folderStartups);
    }
    
    private void RenderStartups(string outPut)
    {
        var entityTemplate = this.Create<Startups>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut, "ConfigServices");
        Response.WriteLine("Is override startup: " + IsStartup);
        if (!File.Exists(fileName) || IsStartup)
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    #endregion
    
    #region Create Controller
    public void CreateFolderController(string outPut) {
    string folderController = outPut + "\\Controllers";
        if (!Directory.Exists(folderController))
            Directory.CreateDirectory(folderController);
        CreateFolderBase(folderController);
        RenderController(folderController);
    }
    
    public void CreateFolderBase(string outPut) {
        string folderReposGenerated = outPut + "\\Base";
        
        if (!Directory.Exists(folderReposGenerated)) {
             Directory.CreateDirectory(folderReposGenerated);
        }

       RenderControllerBase(folderReposGenerated);
       RenderDongBoQuyenController(folderReposGenerated);
       RenderBaseDanhMucController(folderReposGenerated);
    }
    
    private void RenderControllerBase(string outPut)
    {
        var entityTemplate = this.Create<BaseController>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut,  "BaseController");
         if (!File.Exists(fileName))
    		{
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
         
    }
    
     private void RenderDongBoQuyenController(string outPut)
    {
        
        var entityTemplate = this.Create<BaseController>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut,  "DongBoQuyenController");
         if (!File.Exists(fileName))
    		{
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
            
      
    }
    
    private void RenderBaseDanhMucController(string outPut)
    {
         var entityTemplate = this.Create<BaseController>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut,  "BaseDanhMucController");
         if (!File.Exists(fileName))
    		{
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
      
    }
    
    private void RenderController(string outPut)
    {
        var entityTemplate = this.Create<Controller>();
        this.CopyPropertiesTo(entityTemplate);
        for (int i = 0; i < SourceTables.Count; i++) {
            var entity = SourceTables[i];
            var fileName = String.Format("{0}\\{1}.cs", outPut, entity.Name + "Controller");
            if (!File.Exists(fileName))
    		{
                this.CopyPropertiesTo(entityTemplate);
                entityTemplate.SourceTable = entity;
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
        }
    }
    

    #endregion
    
    #region Create Properties
    public void CreateFolderProperties(string outPut) {
        string folderProperties = outPut + "\\Properties";
        
        if (!Directory.Exists(folderProperties))
            Directory.CreateDirectory(folderProperties);
        
        RenderProperties(folderProperties);
    }
    
    private void RenderProperties(string outPut)
    {
        var entityTemplate = this.Create<LaunchSettings>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.json", outPut, "launchSettings");
        if (!File.Exists(fileName))
		{
            this.CopyPropertiesTo(entityTemplate);
            entityTemplate.ScopeService = ScopeService;
            entityTemplate.ScopeName = ScopeName;
            entityTemplate.DebugPersonalEnvironment = DebugPersonalEnvironment;
            entityTemplate.DebugPort = DebugPort;
            entityTemplate.ProjectPortPrefix = ProjectPortPrefix;
            entityTemplate.DebugDeploymentServerIP = DebugDeploymentServerIP;
            Response.WriteLine(fileName);
            entityTemplate.RenderToFile(fileName, true);
		}
    }
    
    #endregion 
    
    #region Create Helper
    
    public void CreateFolderHelper(string outPut) {
        string folderReposGenerated = outPut + "\\Helper";
        
        if (!Directory.Exists(folderReposGenerated)) {
             Directory.CreateDirectory(folderReposGenerated);
        }

       RenderServicesExtention(folderReposGenerated);
       RenderSwaggerExtention(folderReposGenerated);
      
    }
    
    private void RenderServicesExtention(string outPut)
    {
        var entityTemplate = this.Create<BaseController>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut,  "ServicesExtention");
         if (!File.Exists(fileName))
    		{
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
         
    }
    
    private void RenderSwaggerExtention(string outPut)
    {
        var entityTemplate = this.Create<BaseController>();
        this.CopyPropertiesTo(entityTemplate);
        var fileName = String.Format("{0}\\{1}.cs", outPut,  "SwaggerExtention");
         if (!File.Exists(fileName))
    		{
                entityTemplate.ScopeService = ScopeService;
                Response.WriteLine(fileName);
                entityTemplate.RenderToFile(fileName, true);
    		}
         
    }
    
    #endregion
   
</script>